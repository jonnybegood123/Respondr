/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package respondr;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.net.*;
import java.awt.*;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import static respondr.RespondrLogInScreen.friendsList;
import static respondr.RespondrLogInScreen.name;

/**
 *
 * @author HMF5HNZ
 */
public class RespondrMainScreenAdmin extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form RespondrMainScreen
     */
    protected DataInputStream i;
    protected DataOutputStream o;
    protected TextArea output;
    protected TextField input;
    protected Thread listener;
    public Client client;
    public static String name;
    public static String[] retrievedFriendsList;
    public static String[] onlineFriendsList;
    public static String newOnline = "";

    //sets up components and alignments
    public RespondrMainScreenAdmin(String name, String[] retrievedFriendsList) throws IOException {
        this.name = name;
        this.setTitle(name);

        this.retrievedFriendsList = retrievedFriendsList;
        this.onlineFriendsList = new String[retrievedFriendsList.length];
        for (int i = 0; i < onlineFriendsList.length; i++) {
            if (retrievedFriendsList[i].equals("")) {
                onlineFriendsList[i] = "";
            } else {
                onlineFriendsList[i] = "Offline";
            }
        }
        System.out.println(Server.users);
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) friendsList.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        renderer = (DefaultListCellRenderer) onlineList.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        //initialized client with port and name
        client = new Client(15180);
        client.start(name);
        client.name = name;

        //for checking online of offline
        Runnable onlineStatus = () -> {
            while (true) {
                if (client.message.startsWith("$$ONLINE: ")) {
                    for (int i = 0; i < onlineFriendsList.length; i++) {
                        if (client.message.contains(this.retrievedFriendsList[i]) && !this.retrievedFriendsList[i].equals("")) {
                            onlineFriendsList[i] = "Online";
                            onlineList.setModel(new javax.swing.AbstractListModel() {
                                String[] strings = onlineFriendsList;

                                public int getSize() {
                                    return strings.length;
                                }

                                public Object getElementAt(int i) {
                                    return strings[i];
                                }
                            });
                        }
                    }
                }
                // System.out.println(client.message);

            }
        };
        Thread onlineOrOffline = new Thread(onlineStatus);
        onlineOrOffline.start();

        //Messaging logic - opens server
        //Random random = new Random();
        //int port = random.nextInt((8000 - 3000) + 1) + 3000;
        //Server server = new Server(3000);
        //server.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        friendsList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        onlineList = new javax.swing.JList();
        addAFriendButton = new javax.swing.JButton();
        sendMessageButton = new javax.swing.JButton();
        searchConversationsButton = new javax.swing.JButton();
        removeUserButton = new javax.swing.JButton();
        taskBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        fileButton1 = new javax.swing.JMenuItem();
        fileButton2 = new javax.swing.JMenuItem();
        fileButton3 = new javax.swing.JMenuItem();
        fileButton4 = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Options = new javax.swing.JMenu();
        optionsButton1 = new javax.swing.JMenuItem();
        optionsButton2 = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        friendsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = retrievedFriendsList;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        friendsList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList)evt.getSource();
                if (evt.getClickCount() == 1) {
                    int index = list.locationToIndex(evt.getPoint());
                }
                if (evt.getClickCount() == 2) {
                    int index = list.locationToIndex(evt.getPoint());
                    try{
                        System.out.println("Starting conversation with " + list.getModel().getElementAt(index));
                        new RespondrMessageScreen(list.getModel().getElementAt(index).toString(), client).setVisible(true);
                    }
                    catch(IOException e){
                        System.out.println("Couldnt make conversation screen");
                    }
                }
                if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3){
                    int index = list.locationToIndex(evt.getPoint());
                    new RespondrUserProfileScreen(list.getModel().getElementAt(index).toString()).setVisible(true);
                }
            }
        });
        jScrollPane1.setViewportView(friendsList);

        onlineList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = onlineFriendsList;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(onlineList);

        addAFriendButton.setText("Add a Friend");
        addAFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAFriendButtonActionPerformed(evt);
            }
        });

        sendMessageButton.setText("Send Message");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        searchConversationsButton.setText("Search Conversations");
        searchConversationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchConversationsButtonActionPerformed(evt);
            }
        });

        removeUserButton.setText("Remove User");
        removeUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserButtonActionPerformed(evt);
            }
        });

        File.setText("File");
        File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileActionPerformed(evt);
            }
        });

        fileButton1.setText("Add a Friend");
        fileButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButton1ActionPerformed(evt);
            }
        });
        File.add(fileButton1);

        fileButton2.setText("Delete a Friend");
        fileButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButton2ActionPerformed(evt);
            }
        });
        File.add(fileButton2);

        fileButton3.setText("Find a Friend");
        fileButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButton3ActionPerformed(evt);
            }
        });
        File.add(fileButton3);

        fileButton4.setText("Quit");
        fileButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButton4ActionPerformed(evt);
            }
        });
        File.add(fileButton4);

        taskBar.add(File);

        Edit.setText("Edit");
        taskBar.add(Edit);

        Options.setText("Options");

        optionsButton1.setText("Change Password");
        optionsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButton1ActionPerformed(evt);
            }
        });
        Options.add(optionsButton1);

        optionsButton2.setText("View Profile");
        optionsButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButton2ActionPerformed(evt);
            }
        });
        Options.add(optionsButton2);

        taskBar.add(Options);

        Help.setText("Help");
        taskBar.add(Help);

        setJMenuBar(taskBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchConversationsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendMessageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addAFriendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAFriendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchConversationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileActionPerformed

    }//GEN-LAST:event_FileActionPerformed

    private void addAFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAFriendButtonActionPerformed
        RespondrAddAFriendScreen addAFriendScreen = new RespondrAddAFriendScreen(this.name);
        addAFriendScreen.setVisible(true);

        Runnable whileResultsFriendsListExists = () -> {
            while (true) {
                if (!addAFriendScreen.isVisible()) {
                    try (BufferedReader br = new BufferedReader(new FileReader("UserDatabase.txt"))) {
                        String line = "";
                        String[] newFriendsList = new String[20];
                        boolean found = false;
                        while ((line = br.readLine()) != null) {
                            if (line.substring(0, 49).trim().equals(name)) {
                                StringBuffer friend = new StringBuffer();
                                if (line.length() >= 151) {
                                    int pastPosition = 150;
                                    int currentPosition = 151;
                                    int friendsListArrayPosition = 0;
                                    while (!line.substring(pastPosition, currentPosition).contains("|")) {
                                        currentPosition++;
                                        if (line.substring(pastPosition, currentPosition).contains("|")) {
                                            System.out.println(line.substring(pastPosition, currentPosition - 1));
                                            newFriendsList[friendsListArrayPosition] = line.substring(pastPosition, currentPosition - 1);
                                            friendsListArrayPosition++;
                                            pastPosition = currentPosition;
                                            currentPosition = pastPosition + 1;
                                            if (pastPosition == line.length()) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                friendsList.setModel(new javax.swing.AbstractListModel() {
                                    String[] strings = newFriendsList;

                                    public int getSize() {
                                        return strings.length;
                                    }

                                    public Object getElementAt(int i) {
                                        return strings[i];
                                    }
                                });
                                found = true;
                                break;
                            }
                        }
                        if (br.readLine() == null && !found) {
                            JOptionPane.showMessageDialog(null, "Sorry, you entered either your email or password incorrectly.", "ERROR!!", JOptionPane.INFORMATION_MESSAGE);
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "ERROR: EITHER FILE'S NOT FOUND OR SERVER ISN'T OPEN YET!", "ERROR!!", JOptionPane.INFORMATION_MESSAGE);
                        System.out.println(e);
                    }
                    break;
                }
            }
        };
        Thread friendsListThread = new Thread(whileResultsFriendsListExists);
        friendsListThread.start();
    }//GEN-LAST:event_addAFriendButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed

        int index = friendsList.getSelectedIndex();
        if (index != -1) {
            try {
                new RespondrMessageScreen(friendsList.getModel().getElementAt(index).toString(), client).setVisible(true);
                System.out.println("Starting conversation with " + friendsList.getModel().getElementAt(index));
            } catch (Exception e) {
                System.out.println("Invalid friends list element selected.");
            }
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private void fileButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButton1ActionPerformed
        RespondrAddAFriendScreen addAFriendScreen = new RespondrAddAFriendScreen(this.name);
        addAFriendScreen.setVisible(true);

        Runnable whileResultsFriendsListExists = () -> {
            while (true) {
                if (!addAFriendScreen.isVisible()) {
                    try (BufferedReader br = new BufferedReader(new FileReader("UserDatabase.txt"))) {
                        String line = "";
                        String[] newFriendsList = new String[20];
                        boolean found = false;
                        while ((line = br.readLine()) != null) {
                            if (line.substring(0, 49).trim().equals(name)) {
                                StringBuffer friend = new StringBuffer();
                                if (line.length() >= 151) {
                                    int pastPosition = 150;
                                    int currentPosition = 151;
                                    int friendsListArrayPosition = 0;
                                    while (!line.substring(pastPosition, currentPosition).contains("|")) {
                                        currentPosition++;
                                        if (line.substring(pastPosition, currentPosition).contains("|")) {
                                            System.out.println(line.substring(pastPosition, currentPosition - 1));
                                            newFriendsList[friendsListArrayPosition] = line.substring(pastPosition, currentPosition - 1);
                                            friendsListArrayPosition++;
                                            pastPosition = currentPosition;
                                            currentPosition = pastPosition + 1;
                                            if (pastPosition == line.length()) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                friendsList.setModel(new javax.swing.AbstractListModel() {
                                    String[] strings = newFriendsList;

                                    public int getSize() {
                                        return strings.length;
                                    }

                                    public Object getElementAt(int i) {
                                        return strings[i];
                                    }
                                });
                                found = true;
                                break;
                            }
                        }
                        if (br.readLine() == null && !found) {
                            JOptionPane.showMessageDialog(null, "Sorry, you entered either your email or password incorrectly.", "ERROR!!", JOptionPane.INFORMATION_MESSAGE);
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "ERROR: EITHER FILE'S NOT FOUND OR SERVER ISN'T OPEN YET!", "ERROR!!", JOptionPane.INFORMATION_MESSAGE);
                        System.out.println(e);
                    }
                    break;
                }
            }
        };
        Thread friendsListThread = new Thread(whileResultsFriendsListExists);
        friendsListThread.start();
    }//GEN-LAST:event_fileButton1ActionPerformed

    private void fileButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButton2ActionPerformed
        RespondrDeleteAFriendScreen deleteAFriendScreen = new RespondrDeleteAFriendScreen(this.name);
        deleteAFriendScreen.setVisible(true);

        Runnable whileResultsFriendsListExists = () -> {
            while (true) {
                if (!deleteAFriendScreen.isVisible()) {
                    try (BufferedReader br = new BufferedReader(new FileReader("UserDatabase.txt"))) {
                        String line = "";
                        String[] newFriendsList = new String[20];
                        boolean found = false;
                        while ((line = br.readLine()) != null) {
                            if (line.substring(0, 49).trim().equals(name)) {
                                StringBuffer friend = new StringBuffer();
                                if (line.length() >= 151) {
                                    int pastPosition = 150;
                                    int currentPosition = 151;
                                    int friendsListArrayPosition = 0;
                                    while (!line.substring(pastPosition, currentPosition).contains("|")) {
                                        currentPosition++;
                                        if (line.substring(pastPosition, currentPosition).contains("|")) {
                                            System.out.println(line.substring(pastPosition, currentPosition - 1));
                                            newFriendsList[friendsListArrayPosition] = line.substring(pastPosition, currentPosition - 1);
                                            friendsListArrayPosition++;
                                            pastPosition = currentPosition;
                                            currentPosition = pastPosition + 1;
                                            if (pastPosition == line.length()) {
                                                break;
                                            }
                                        }
                                    }
                                }
                                friendsList.setModel(new javax.swing.AbstractListModel() {
                                    String[] strings = newFriendsList;

                                    public int getSize() {
                                        return strings.length;
                                    }

                                    public Object getElementAt(int i) {
                                        return strings[i];
                                    }
                                });
                                found = true;
                                break;
                            }
                        }
                        if (br.readLine() == null && !found) {
                            JOptionPane.showMessageDialog(null, "Sorry, you entered either your email or password incorrectly.", "ERROR!!", JOptionPane.INFORMATION_MESSAGE);
                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "ERROR: EITHER FILE'S NOT FOUND OR SERVER ISN'T OPEN YET!", "ERROR!!", JOptionPane.INFORMATION_MESSAGE);
                        System.out.println(e);
                    }
                    break;
                }
            }
        };
        Thread friendsListThread = new Thread(whileResultsFriendsListExists);
        friendsListThread.start();
    }//GEN-LAST:event_fileButton2ActionPerformed

    private void fileButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileButton3ActionPerformed

    private void fileButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_fileButton4ActionPerformed

    private void optionsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButton1ActionPerformed
        new RespondrChangePasswordScreen(name).setVisible(true);
    }//GEN-LAST:event_optionsButton1ActionPerformed

    private void optionsButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButton2ActionPerformed
        new RespondrUserProfileScreen(name).setVisible(true);
    }//GEN-LAST:event_optionsButton2ActionPerformed

    private void searchConversationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchConversationsButtonActionPerformed
        new RespondrSearchConversationsScreen().setVisible(true);
    }//GEN-LAST:event_searchConversationsButtonActionPerformed

    private void removeUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUserButtonActionPerformed
        new RespondrRemoveUserScreen().setVisible(true);
    }//GEN-LAST:event_removeUserButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RespondrMainScreenAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RespondrMainScreenAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RespondrMainScreenAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RespondrMainScreenAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new RespondrMainScreenAdmin(name, retrievedFriendsList).setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(RespondrMainScreenAdmin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Edit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenu Options;
    private javax.swing.JButton addAFriendButton;
    private javax.swing.JMenuItem fileButton1;
    private javax.swing.JMenuItem fileButton2;
    private javax.swing.JMenuItem fileButton3;
    private javax.swing.JMenuItem fileButton4;
    private javax.swing.JList friendsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList onlineList;
    private javax.swing.JMenuItem optionsButton1;
    private javax.swing.JMenuItem optionsButton2;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JButton searchConversationsButton;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JMenuBar taskBar;
    // End of variables declaration//GEN-END:variables
}
